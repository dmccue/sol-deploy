---

- name: test ssh connectivity
  ping:

- name: root activities
  block:
    - name: set timezone to Europe/London
      community.general.timezone:
        name: Europe/London

    - name: update distro
      apt:
        update_cache: true
        upgrade: true

    - name: install packages
      apt:
        name: "{{ item }}"
      loop: "{{ ubuntu_packages }}"

    - name: set tuned profile
      shell: tuned-adm active | grep "{{ tuned_profile }}" || tuned-adm profile {{ tuned_profile }}

    - name: set sysctl settings
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
      with_dict: "{{ sysctl_config }}"

    - name: add or modify hard nofile limits for wildcard domain
      community.general.pam_limits:
        domain: '*'
        limit_type: hard
        limit_item: nofile
        value: "{{ sysctl_config['vm.max_map_count'] }}"

    - name: create logrotate file
      copy:
        dest: /etc/logrotate.d/sol
        mode: '0644'
        content: |
          {{ solana_dir }}/logs/solana-validator.log {
            rotate 7
            daily
            missingok
            postrotate
              systemctl kill -s USR1 sol.service
            endscript
          }

    - name: create sol.service
      copy:
        dest: /etc/systemd/system/sol.service
        mode: '0644'
        content: |
          [Unit]
          Description=Solana Validator
          After=network.target
          Wants=solana-sys-tuner.service
          StartLimitIntervalSec=0

          [Service]
          Type=simple
          Restart=always
          RestartSec=5
          User={{ default_user }}
          LimitNOFILE={{ sysctl_config['vm.max_map_count'] }}
          LogRateLimitIntervalSec=0
          Environment="PATH=/bin:/usr/bin:/home/{{ default_user }}/.local/share/solana/install/active_release/bin"
          ExecStart={{ solana_dir }}/bin/validator.sh

          [Install]
          WantedBy=multi-user.target

    - name: create solana-sys-tuner.service
      copy:
        dest: /etc/systemd/system/solana-sys-tuner.service
        mode: '0644'
        content: |
          [Unit]
          Description=Solana Sys Tuner
          After=network.target
          StartLimitIntervalSec=0

          [Service]
          Type=simple
          Restart=always
          RestartSec=5
          User={{ default_user }}
          LimitNOFILE={{ sysctl_config['vm.max_map_count'] }}
          LogRateLimitIntervalSec=0
          Environment="PATH=/bin:/usr/bin:/home/{{ default_user }}/.local/share/solana/install/active_release/bin"
          ExecStart={{ solana_dir }}/bin/solana-sys-tuner.sh

          [Install]
          WantedBy=multi-user.target

    - name: create custom solana-dev-setup
      copy:
        dest: /usr/local/bin/solana-dev-setup
        mode: '0775'
        content: |
          #!/bin/bash
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source ~/.cargo/env
          rustup component add rustfmt
          rustup update
          git clone --single-branch --branch master https://github.com/solana-labs/solana.git ~/solana && cd ~/solana
          cargo build --release &> ~/solana-build.log
          # ./run.sh &> ../solana-run.log &


    - name: create custom solana-bench-dev
      copy:
        dest: /usr/local/bin/solana-bench-dev
        mode: '0775'
        content: |
          #!/bin/bash
          NDEBUG=1 solana-bench-tps \
          --no-multi-client \
          --entrypoint devnet.solana.com:8001 \
          --faucet devnet.solana.com:9900 \
          --duration 60 \
          --tx_count 50

    - name: create solana directory
      file:
        path: "{{ solana_dir }}"
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        state: directory


  become: true



- name: create solana subdir
  file:
    path: "{{ solana_dir }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - bin
    - logs
    - keys

- name: create validator.sh
  copy:
    dest: "{{ solana_dir }}/bin/validator.sh"
    mode: '0740'
    content: |
      #!/bin/bash
      export SOLANA_METRICS_CONFIG="host=https://metrics.solana.com:8086,db=devnet,u=scratch_writer,p=topsecret"

      solana-validator \
        --identity            {{ solana_dir }}/keys/validator-keypair.json \
        --vote-account        {{ solana_dir }}/keys/vote-account-keypair.json \
        --ledger              {{ solana_dir }}/validator-ledger \
        --rpc-port            {{ solana_port_rpc }} \
        --dynamic-port-range  {{ solana_port_dynamicrange }} \
        --no-untrusted-rpc \
        --trusted-validator   dv1LfzJvDF7S1fBKpFgKoKXK5yoSosmkAdfbxBo1GqJ \
        --expected-genesis-hash EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG \
        --entrypoint          {{ solana_environment_entrypoint }}:{{ solana_environment_entrypoint_port }} \
        --wal-recovery-mode skip_any_corrupted_record \
        --limit-ledger-size \
        --log                 {{ solana_dir }}/logs/solana-validator.log

- name: Create solana-sys-tuner.sh
  copy:
    dest: "{{ solana_dir }}/bin/solana-sys-tuner.sh"
    mode: '0740'
    content: |
      #!/bin/bash
      sudo /home/{{ default_user }}/.local/share/solana/install/active_release/bin/solana-sys-tuner \
           --user {{ default_user }} \
           &> {{ solana_dir }}/logs/sys-tuner.log

- name: get solana installer
  get_url:
    url: https://release.solana.com/stable/solana-install-init-x86_64-unknown-linux-gnu
    dest: "{{ solana_dir }}/bin/solana-install-init"
    mode: '0774'

# - name: get solana release
#   get_uri:
#     url: https://github.com/solana-labs/solana/releases/download/v1.4.19/solana-release-x86_64-unknown-linux-gnu.tar.bz2
#     dest: ~/solana-release-x86_64-unknown-linux-gnu.tar.bz2
#     mode: '0664'

- name: check solana client exists
  stat:
    path: "{{ solana_client_bin }}/solana"
  register: solana_client_installed

- name: install solana client
  shell:
    executable: /bin/bash
    chdir: "{{ solana_dir }}"
    cmd: |
      source ~/.profile
      which solana || ./bin/solana-install-init stable
  when: solana_client_installed.stat.isreg is not defined or not solana_client_installed.stat.isreg

- name: install solana validator
  shell:
    executable: /bin/bash
    chdir: "{{ solana_dir }}"
    cmd: |
      source ~/.profile

      solanapath=$(echo $PATH | cut -d: -f1)
      for file in $(find $solanapath -maxdepth 1 -type f); do $file -V; done &> logs/solana-versions.txt

      echo set environment:
      solana config set --url http://{{ solana_environment_endpoint }}

      echo generate validator keypair:
      echo -n '{{ solana_validator_key.private }}' > keys/validator-keypair.json
      echo get validator publickey:
      solana-keygen pubkey keys/validator-keypair.json | tee keys/validator-keypair.pubkey
      echo set validator keypair:
      solana config set --keypair keys/validator-keypair.json

      echo generate voteaccount keypair:
      [ ! -f 'keys/vote-account-keypair.json' ] && solana-keygen new -o keys/vote-account-keypair.json --no-passphrase
      echo get voteaccount publickey:
      solana-keygen pubkey keys/vote-account-keypair.json | tee keys/vote-account-keypair.pubkey
      echo set voteaccount keypair:
      solana create-vote-account keys/vote-account-keypair.json keys/validator-keypair.json

      # Setup Balance
      echo Airdrop:
      solana airdrop 5
      echo Balance:
      solana balance
      echo Balance Lamports:
      solana balance --lamports

      echo Starting Vanity KeyGen:
      #solana-keygen grind --starts-with cwhee1:2 &> logs/cloudwheel-vanity.log &

  when: solana_client_installed.stat.isreg is not defined or not solana_client_installed.stat.isreg


# - name: setup solana development environment
#   shell:
#     executable: /bin/bash
#     chdir: "{{ solana_dir }}"
#     cmd: |
#       source ~/.profile

#       # # Setup development env
#       # apt -y install libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang make && \
#       # su -l {{ default_user }} -c "
#       #   /usr/local/bin/solana-dev-setup
#       # ">logs/dev-setup.log &


- block:

    - name: Reload service logrotate
      systemd:
        name: logrotate.service
        enabled: true
        daemon_reload: true
        state: reloaded

    - name: Reload service solana-sys-tuner
      systemd:
        name: solana-sys-tuner.service
        enabled: true
        daemon_reload: true
        state: restarted

    - name: Reload service solana
      systemd:
        name: sol.service
        enabled: true
        daemon_reload: true
        state: started

  become: true

- name: retrieve pub validator-keypair
  slurp:
    src: "{{ solana_dir }}/keys/validator-keypair.pubkey"
  register: validator_key
- name: retrieve pub vote-account-keypair
  slurp:
    src: "{{ solana_dir }}/keys/vote-account-keypair.pubkey"
  register: voter_key

- name: set public keys to variables
  set_fact:
    validator_pubkey: "{{ validator_key.content | b64decode | trim }}"
    voter_pubkey: "{{ voter_key.content | b64decode | trim }}"

- name: create diagnostic links
  copy:
    dest: "~/links.txt"
    mode: '0660'
    content: |
      Metrics link - https://metrics.solana.com:3000/d/monitor-edge/cluster-telemetry-edge?
      refresh=60s&\
      orgId=2&\
      var-datasource=Solana%20Metrics%20(read-only)&\
      var-testnet=devnet&\
      var-hostid={{ validator_pubkey }}

- name: test validator rpc port is responding
  wait_for:
    port: "{{ solana_port_rpc }}"
    timeout: 720

- name: test validator is present in list of cluster nodes
  uri:
    url: http://{{ solana_environment_endpoint }}
    method: POST
    return_content: yes
    status_code: 200
    body: '{"jsonrpc":"2.0","id":1,"method":"getClusterNodes"}'
    body_format: json
  delegate_to: localhost
  register: result
  until: "validator_pubkey in result.json | community.general.json_query('result[*].pubkey')"
  retries: 10
  delay: 10


- name: retrieve list of vote accounts
  uri:
    url: http://{{ solana_environment_endpoint }}
    method: POST
    return_content: yes
    status_code: 200
    body: '{"jsonrpc":"2.0","id":1,"method":"getVoteAccounts"}'
    body_format: json
  delegate_to: localhost
  register: result
  until: result.json.result | length > 0
  retries: 5
  delay: 2

- name: debug - vote accounts
  debug: msg="{{ result.json.result | to_yaml }}"
  #debug: msg="{{ result.json.result | community.general.json_query('result[*].pubkey') | default([[]])| first }}"

- name: Validator public key
  debug: msg="validator public key:{{ validator_pubkey }}"
- name: Voter public key
  debug: msg="voter public key:{{ voter_pubkey }}"
- name: SSH access details
  debug: msg="ssh {{ default_user }}@{{ ansible_host }}"

