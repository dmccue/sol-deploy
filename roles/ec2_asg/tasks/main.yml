- name: check and setup local environment
  block:

    # This is to support boto v2 modules which do not yet support boto v3
    # e.g. community.aws.ec2_vpc_route_table_info
    - name: Check environment variables have been set
      fail: msg="Please set '{{ item }}' environment variable"
      when: not lookup('env', item) or not lookup('env', item)
      loop:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_KEYPAIR_NAME

    - name: install python packages
      pip:
        name: "{{ item }}"
      loop: "{{ local_pip_packages }}"

  tags:
    - always


- block:
    - name: delete ASG
      community.aws.ec2_asg:
        name: "{{ asg_name }}"
        state: absent

    - name: delete ASG_LC
      community.aws.ec2_lc:
        name: "{{ asg_lc_name }}"
        state: absent

    - name: get vpc ID from VPC name
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ vpc_name }}"
      register: vpcs_match

    # delete Security Groups
    - name: get security groups
      amazon.aws.ec2_group_info:
        filters:
          vpc-id: "{{ item.vpc_id }}"
      loop: "{{ vpcs_match.vpcs }}"
      register: sg_match
    - name: delete security groups
      amazon.aws.ec2_group:
        group_id: "{{ item.group_id }}"
        state: absent
      loop: "{{ sg_match | community.general.json_query('results[*].security_groups[*]') | default([[]]) | first }}"
      when: sg_match.results and not item.group_name == "default"

    # delete Route Tables
    - name: get vpc route tables
      community.aws.ec2_vpc_route_table_info:
        region: "{{ aws_region }}"
        filters:
          vpc_id: "{{ item.vpc_id }}"
      loop: "{{ vpcs_match.vpcs }}"
      register: vpc_route_tables
    - name: delete vpc route table
      community.aws.ec2_vpc_route_table:
        region: "{{ aws_region }}"
        route_table_id: "{{ item.id }}"
        lookup: id
        state: absent
      loop: "{{ vpc_route_tables | community.general.json_query('results[*].route_tables[*]') | default([[]]) | first }}"
      when: vpc_route_tables.results and item.associations | selectattr('main') | length == 0

    # delete IGW
    - name: delete vpc IGW
      community.aws.ec2_vpc_igw:
        vpc_id: "{{ item.vpc_id }}"
        region: "{{ aws_region }}"
        state: absent
      loop: "{{ vpcs_match.vpcs }}"

    # delete NACLs
    - name: get vpc NACLs
      community.aws.ec2_vpc_nacl_info:
        region: "{{ aws_region }}"
        filters:
          'vpc-id': "{{ item.vpc_id }}"
      loop: "{{ vpcs_match.vpcs }}"
      register: vpc_nacls
    - name: delete vpc NACLs
      community.aws.ec2_vpc_nacl:
        nacl_id: "{{ item.nacl_id }}"
        state: absent
      loop: "{{ vpc_nacls | community.general.json_query('results[*].nacls[*]') | default([[]]) | first }}"
      when: vpc_nacls.results and not item.is_default

    # delete Subnets
    - name: get vpc subnets
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ item.vpc_id }}"
      loop: "{{ vpcs_match.vpcs }}"
      register: vpc_subnets
    - name: delete vpc subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ item.vpc_id }}"
        cidr: "{{ item.cidr_block }}"
        state: absent
      loop: "{{ vpc_subnets | community.general.json_query('results[*].subnets[*]') | default([[]]) | first }}"
      when: vpc_subnets.results

    # delete VPC
    - name: delete vpc
      amazon.aws.ec2_vpc_net:
        name: "{{ item.tags.Name }}"
        cidr_block: ["{{ item.cidr_block }}"]
        purge_cidrs: true
        state: absent
      loop: "{{ vpcs_match.vpcs }}"

  tags:
    - delete
    - never


- name: Get AMI ID
  amazon.aws.ec2_ami_info:
    owner: "{{ ami_image.owner }}"
    filters:
      name: "{{ ami_image.name }}*"
  register: ami_result

- name: create VPC
  amazon.aws.ec2_vpc_net:
    region: "{{ aws_region }}"
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
  register: create_vpc
- name: "set fact: VPC ID"
  set_fact:
    vpc_id: "{{ create_vpc.vpc.id }}"

- name: create VPC subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    map_public: "{{ item.key is match('public') | ternary('yes', 'no', 'no') }}"
    tags:
      Name: "{{ item.key }}"
  with_dict: "{{ vpc_subnets }}"
  register: created_vpc_subnets

- name: create VPC security groups
  amazon.aws.ec2_group:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    rules: "{{ item.rules }}"
  loop: "{{ vpc_security_groups }}"
  register: created_vpc_security_groups

- name: create ec2 VPC internet gateway
  community.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
  register: vpc_igw

- name: create vpc nacl
  community.aws.ec2_vpc_nacl:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    name: "{{ vpc_acl_name }}"
    subnets: "{{ created_vpc_subnets.results | map(attribute='subnet') | selectattr('map_public_ip_on_launch') | map(attribute='id') | list }}"
    ingress:  # incoming connections
      - [100, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]  # icmp
      - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]  # tcp/ssh
      - [300, 'udp', 'allow', "{{ destinationCidrBlock }}", null, null, 8000, 10000]  # udp/sol
      - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]  # tcp/ephemeral
    egress:  # outgoing connections
      - [100, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]  # icmp
      - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22] # tcp/ssh
      - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]  # tcp/http
      - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 443, 443]  # tcp/https
      - [500, 'udp', 'allow', "{{ destinationCidrBlock }}", null, null, 8000, 10000]  # udp/sol
      - [600, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]  # tcp/ephemeral


- name: create ec2 public route table
  community.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    subnets: "{{ created_vpc_subnets.results | map(attribute='subnet') | selectattr('map_public_ip_on_launch') | map(attribute='id') | list }}"
    routes:
      - dest: "{{ destinationCidrBlock }}"
        gateway_id: "{{ vpc_igw.gateway_id }}"

- name: create ASG_LC
  community.aws.ec2_lc:
    vpc_id: "{{ vpc_id }}"
    aws_region: "{{ aws_region }}"
    name: "{{ asg_lc_name }}"
    image_id: "{{ ( ami_result.images | sort(attribute='creation_date') | last ).image_id }}"
    key_name: "{{ key_name }}"
    security_groups: "{{ created_vpc_security_groups.results | map(attribute='group_id') | list }}"
    instance_type: "{{ instance_type }}"
    assign_public_ip: true
    ebs_optimized: true
    instance_monitoring: true
    volumes:
      - device_name: /dev/sda1
        delete_on_termination: true
        volume_size: "{{ volume_size }}"
        volume_type: io1
        iops: 2500 # 50 iops per GB for io1 (50:1 ratio)
        #throughput: 1000
    user_data: |
      #!/bin/bash
      echo "end - $(date +%s) - $(date)" >userdata.log
  register: launch_config

- name: create ASG
  community.aws.ec2_asg:
    name: "{{ asg_name }}"
    region: "{{ aws_region }}"
    availability_zones: "{{ created_vpc_subnets.results | map(attribute='subnet.availability_zone') | list | unique }}"
    vpc_zone_identifier: "{{ created_vpc_subnets.results | map(attribute='subnet') | selectattr('map_public_ip_on_launch') | map(attribute='id') | list }}"
    launch_config_name: "{{ launch_config.name }}"
    min_size: 1
    desired_capacity: 1
    max_size: 1
    replace_all_instances: true
    wait_for_instances: true
    tags:
      - environment: test
        propagate_at_launch: true
  register: autoscaling_group
  
- name: Set list of autoscaling instance IDs
  set_fact:
    asg_instances: "{{ autoscaling_group.instances }}"
  when: autoscaling_group is defined
  

- block:
    - name: Gather information on ASG Instances
      community.aws.ec2_asg_info:
        name: "{{ asg_name }}"
      register: autoscaling_group_instances
      when: autoscaling_group is not defined
    - name: Set list of autoscaling instance IDs
      set_fact:
        asg_instances: "{{ autoscaling_group_instances | community.general.json_query('results[*].instances[*].instance_id') | default([[]])| first }}"
      when: not autoscaling_group is defined
    
    - name: Gather information on ec2 instances
      community.aws.ec2_instance_info:
        instance_ids: "{{ asg_instances }}"
      register: ec2_instances
    
    - name: create instance group
      add_host:
        name: "{{ item.instance_id }}"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_user: "{{ default_user }}"
        ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
        group: asg_instances
      loop: "{{ ec2_instances.instances }}"
      loop_control:
        label: "{{ item.instance_id }}"
  tags:
    - application